Problem Faced: React Authentication State & Routing

Description:
While building the SheShield app, I encountered an issue where, after a successful login, the app did not automatically redirect to the dashboard. The backend was returning a valid token and user data, and these were saved in localStorage, but the UI did not update until I manually refreshed the page.

Debugging Process:
1. Checked the Network Tab:
   - I used the browser's developer tools to inspect the network activity.
   - I confirmed that the frontend was making the correct POST request to /api/auth/login and the backend was responding with a 200 OK and the expected data (token and user object).
   - This told me the backend and API integration were working as intended.

2. Inspected Local Storage:
   - I checked the Application tab in DevTools and saw that the token and user were being correctly saved in localStorage after login.

3. Reviewed the Console for Errors:
   - I looked for any JavaScript errors in the browser console that might explain why the redirect wasn't happening, but found none.

4. Tested Manual Refresh:
   - I noticed that after a manual page refresh, the dashboard would load correctly, confirming that the authentication data was present but the UI wasn't updating automatically.

Root Cause:
- React does not automatically re-render components when localStorage changes.
- In my App.js, I was checking for authentication by reading localStorage.getItem('token') only once when the component rendered.
- After login, even though the token was saved, React Router didn't know about the change, so the protected routes didn't update until a manual refresh.

How I Tackled It:
Solution:
I updated my authentication logic to use a React state variable for the token, instead of reading directly from localStorage. This way, when the token changes (after login or logout), the state updates and React re-renders the routes, allowing for immediate navigation to the dashboard.

Implementation:
- Used useState to track the token.
- Updated the token state after login/logout.
- Optionally, added a listener for the storage event to handle login/logout in other tabs.
- As a quick fix, I also tried using a key prop on the <Routes> component to force a re-render when the token changes.

Code Example:
const [token, setToken] = useState(localStorage.getItem('token'));
useEffect(() => {
  const interval = setInterval(() => {
    setToken(localStorage.getItem('token'));
  }, 500);
  return () => clearInterval(interval);
}, []);

What I Learned:
- How to use browser developer tools (Network, Application, Console tabs) to debug frontend-backend integration issues.
- React does not re-render on localStorage changes by default.
- For authentication, it's best to use state or context to track login status.
- Always test the full login flow, including redirects and protected routes, to catch these issues.

This experience helped me better understand React's rendering behavior, the importance of state management for authentication, and how to systematically debug full-stack applications using browser tools. 